{
  parserClass               = "mobi.hsz.idea.gitignore.parser.GitignoreParser"

  extends                   = "com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix            = "Gitignore"
  psiImplClassSuffix        = "Impl"
  psiPackage                = "mobi.hsz.idea.gitignore.psi"
  psiImplPackage            = "mobi.hsz.idea.gitignore.psi.impl"
  psiImplUtilClass          = "mobi.hsz.idea.gitignore.psi.GitignorePsiUtil"

  elementTypeHolderClass    = "mobi.hsz.idea.gitignore.psi.GitignoreTypes"
  elementTypeClass          = "mobi.hsz.idea.gitignore.psi.GitignoreElementType"
  tokenTypeClass            = "mobi.hsz.idea.gitignore.psi.GitignoreTokenType"

  tokens = [
    left NEGATION           = "!"
    SLASH                   = "/"
    left BRACKET_LEFT       = "regexp:(?:\\\[)\["
    right BRACKET_RIGHT     = "regexp:(?:\\\])\]"
    VALUE                   = "regexp:(?![!#\s])[^/\s]+"
//    VALUE                   = "regexp:[^!#\s][^\s]*"
    HEADER                  = "regexp:###[^\r\n]*"
    SECTION                 = "regexp:##[^\r\n]*"
    COMMENT                 = "regexp:#[^\r\n]*"


    private CRLF            = "regexp:\s*"
//    private FIRST           = "regexp:[^!#\s]"
//    ENTRY_DIRECTORY         = "regexp:[^!#\s][\S ]*/"
//    ENTRY_FILE              = "regexp:[^!#\s][\S ]*"
  ]
}

gitignoreFile           ::= item_ *
private item_           ::= comment_ | entry_ | CRLF
private comment_        ::= HEADER | SECTION | COMMENT
private entry_          ::= NEGATED_ENTRY | ENTRY
NEGATED_ENTRY           ::= NEGATION ENTRY {extends="ENTRY"}
ENTRY                   ::= (ENTRY_DIRECTORY | ENTRY_FILE) { methods=[getEntry] recoverWhile="entry_recover_" }
private entry_recover_  ::= !(CRLF)

ENTRY_FILE              ::= value_
ENTRY_DIRECTORY         ::= value_ SLASH {extends="ENTRY_FILE"}

private meta value_     ::= (SLASH? ((BRACKET_LEFT VALUE BRACKET_RIGHT) | VALUE)) +
